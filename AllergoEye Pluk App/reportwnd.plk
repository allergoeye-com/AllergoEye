class AE_ReportWnd : ModalForm {
	Parent;
	ReportName;
	DownloadReport;
	Report;
	NumbData;
	ToolBar;
	Height;
	Width;
	DBPatient;
	DBDate;
	TherapyControl;
	TherapyStartDate;
	SingleImageForAdv;
};
event WND_SIZE, AE_ReportWnd::OnSize;
//event WND_HSCROLL, AE_ReportWnd::OnHScroll;
//event WND_VSCROLL, AE_ReportWnd::OnVScroll;


//====================================================
//
//====================================================
new AE_ReportWnd::AE_ReportWnd(refer object DBPatient, refer object Vector, refer object GWnd) = <|
param Patient, DateTestList, Parent;
	.DBPatient = &Patient;
	.DBDate = DateTestList;
	.TherapyControl = DateTestList->Len() > 1;
	.Parent = &Parent;
	self->InitReportName();
	self->ModalForm("REPORT_WND", Parent);
	self->AllowEvent( WND_SIZE );
	self->Bind(self);
|>;
//====================================================
//
//====================================================
new AE_ReportWnd::AE_ReportWnd(refer object Date, refer object DBPatient, refer object Vector, refer object GWnd) = <|
param TherapyStartDate, Patient, DateTestList, Parent;
	.TherapyStartDate = TherapyStartDate;
	.DBPatient = &Patient;
	.DBDate = DateTestList;
	.TherapyControl = DateTestList->Len() > 1;
	.Parent = &Parent;
	self->InitReportName();
	self->ModalForm("REPORT_WND", Parent);
	self->AllowEvent( WND_SIZE );
	self->Bind(self);
|>;
//====================================================
//
//====================================================
new AE_ReportWnd::AE_ReportWnd(refer object DBPatient, refer object GWnd, refer object BaseString) = <|
param Patient, Parent, DownloadReport;
	.Parent = &Parent;
	.DBPatient = &Patient;
	.DBDate = << >>;
	.DownloadReport = DownloadReport;
	self->InitReportName();
	self->ModalForm("REPORT_WND", Parent);
	self->AllowEvent( WND_SIZE );
	self->Bind(self);

|>;
//====================================================
//
//====================================================
new AE_ReportWnd::InitReportName(void) = <|
	if (.TherapyControl == TRUE)
		.ReportName = AllergoEyeIni->ReadStr("PATH", "PLUK") @ "report_therapy.rpj";
	else
	{
		.ReportName = AllergoEyeIni->ReadStr("PATH", "PLUK") @ "report.rpj";
		if (AllergoEyeIni->ReadBool("REPORT", "HNO", FALSE))
			.ReportName = JustDirName(.ReportName) @ JustName(.ReportName) @ "_ger-hno" @ ".rpj";
	}
|>;
//====================================================
//
//====================================================
new AE_ReportWnd::Setup(void) = <|
	.ToolBar = instance ReportToolBar(self);
	.Report = instance AllergoReport(*.DBPatient, .DBDate, "REPORT_CHILD", self);
	
	.Report->Open();
	if (.DownloadReport == EMPTY)
	{
		if (!AllergoEyeIni->ReadBool("REPORT", "HNO", FALSE))
		{
			if (.TherapyControl)
				.Report->Load(<< << "TherapyReport", .ReportName>> >>);
			else
				.Report->Load(<< << "AReport", .ReportName>> >>);
		}
		else
		{
			.Report->Load(<< << "AReport", .ReportName>> >>);
			new ls = .Parent->GetSelect2List();
			if (ls->Len() > 0 && ls[0].Pictures->Len() > 0)
			{
				new ImageFileName = ls[0].Pictures[0].Path;
				.SingleImageForAdv = instance MBmp();
				.SingleImageForAdv->LoadImage(ImageFileName);
			}
		}
		self->SetHeaderAnFooterFromReport();
		self->SetExamData();
	}
	else
	{
		.Report->Load(.DownloadReport);
		.ToolBar->DisableViewImage();
	}
	if (.Report.vRep[0].ReportName == "TherapyReport")
	{
		.ToolBar->HideItem(ID_TEXT_VIEW_IMG);
		.ToolBar->HideItem(ID_VIEW_IMAGES);
	}
	self->ModalForm::Setup();
//	self->Maximize();
	self->UpdateReportSizePos();
|>;
//=========================================================
//
//=========================================================
new AE_ReportWnd::SetHeaderAnFooterFromReport(void) = <|
	onerror {
		return;
	};
	if (.SingleImageForAdv == EMPTY)
	{
		if (.TherapyControl != TRUE)
		{
			.Report->FillCellAndShow("REPORT_TITLE", "REPORT_TITLE_TXT", W1_REPORT);
			.Report->FillCellAndShow("COMMENT_TAB", "COMMENT_TXT", W1_COMMENT);
		}
		else
		{
			.Report->FillCellAndShow("REPORT_TITLE", "REPORT_TITLE_TXT", W1_THERAPY_CONTROL);
			.Report->FillCellAndShow("PATIENT", "CAP_TXT", W1_CAP_TXT);
			new c_index = .DBPatient.CAP->Find(.DBDate[0].Allergen, 0, <|param key, elem; return key == elem.Allergen; |>);
			if (c_index >= 0)
				.Report->FillCellAndShow("PATIENT", "CAP", Printf("%d", .DBPatient.CAP[c_index].CAP));
			.Report->FillCellAndShow("PATIENT", "THERAPY_START_DATE", W1_START_THERAPY_DATE_TXT);
			new t_index = .DBPatient.Therapy->Find(.TherapyStartDate, 0, <|param key, elem; return key == elem.StartDate; |>);
			.Report->FillCellAndShow("PATIENT", "START_THERAPY", .TherapyStartDate->PrintDMY() @ "     " @ instance String(.DBPatient.Therapy[t_index].Medication));
			.Report->FillCellAndShow("PATIENT", "ALLERGEN_TXT", W1_ALLERGEN);
			.Report->FillCellAndShow("PATIENT", "ALLERGEN", GetAllergenLocal(.DBDate[0].Allergen));
		}
		.Report->FillCellAndShow("PATIENT", "PATIENT_TXT", W1_PATIENT);
		.Report->FillCellAndShow("PATIENT", "ID", .DBPatient.PatientIDStr);
		.Report->FillCellAndShow("PATIENT", "NAME_TXT", W1_NAME);
		.Report->FillCellAndShow("PATIENT", "NAME", Printf("%s %s", .DBPatient.FirstName, .DBPatient.LastName));
		.Report->FillCellAndShow("PATIENT", "BIRTHDATE_TXT", W1_BIRTHDATE);
		.Report->FillCellAndShow("PATIENT", "BIRTHDAY", .DBPatient.DateOfBirth->Date::Print());
		.Report->FillCellAndShow("CONCLUSION_TAB", "CONCLUSION_TXT", W1_CONCLUSION);
		.Report->FillCellAndShow("RESEACHER", "RESEACHER_TXT", W1_RESEACHER);
		new Place = AllergoEyeIni->ReadStrW("PLACE", "TOWN", "");
		if (Place != "")
			.Report->FillCellAndShow("DATE_PLACE", "REP_PLACE", Place);
	}
	.Report->FillCellAndShow("DATE_PLACE", "REP_DATE", instance Date()->Print());
|>;
//=========================================================
//
//=========================================================
new AE_ReportWnd::SetExamData(void) = <|
	onerror {
		return;
	};
	if (.SingleImageForAdv == EMPTY)
	{
		if (.TherapyControl != TRUE)
		{
			.Report->FillCellAndShow("EXAM_DATA", "TEST_TXT", W10_TEST);
			.Report->FillCellAndShow("EXAM_DATA", "DATE_TXT", W1_DATE);
			.Report->FillCellAndShow("EXAM_DATA", "TEST_DATE", .DBDate[0].Date->PrintDMY());
			.Report->FillCellAndShow("EXAM_DATA", "ALLERGEN_TXT", W1_ALLERGEN);
			.Report->FillCellAndShow("EXAM_DATA", "ALLERGEN", GetAllergenLocal(.DBDate[0].Allergen));
			.Report->FillCellAndShow("EXAM_DATA", "CAP_TXT", W1_CAP_TXT);
	
			new c_index = .DBPatient.CAP->Find(.DBDate[0].Allergen, 0, <|param key, elem; return key == elem.Allergen; |>);
			if (c_index >= 0)
				.Report->FillCellAndShow("EXAM_DATA", "CAP", Printf("%d", .DBPatient.CAP[c_index].CAP));
			.Report->FillCellAndShow("EXAM_DATA", "THERAPY_START_DATE", W1_START_THERAPY_DATE_TXT);
			new t_index = .DBPatient.Therapy->Find(.DBDate[0].Allergen, 0, <|param key, elem; return key == elem.Allergen; |>);
			if (t_index >= 0)
				.Report->FillCellAndShow("EXAM_DATA", "START_THERAPY", .DBPatient.Therapy[t_index].StartDate->Date::PrintDMY() @ "     " @ instance String(.DBPatient.Therapy[t_index].Medication));
	
			onerror {
				return;
			}
			new Score = .DBDate[0]->GetAllScore();
			for (new k = 0; k < 3; ++k)
				.Report->FillCellAndShow("SSS", Printf("SSS_%d", k + 1), Printf("%5.2f", Score[k]));
		}
		else
		{
			new size = .Parent.Graph->GetClientSize();
			new rect = instance Rect(0, 0, size[0], size[1]);
			.Report.vRep[0]->FillCell("GRAPHIC_1", 0, 0, .Parent->GetGraphicOpScoreImage(.TherapyStartDate, .DBDate, rect));
			.Report.vRep[0]->FillCell("GRAPHIC_2", 0, 0, .Parent->GetGraphicAEScoreImage(.TherapyStartDate, .DBDate, rect));
			.Report.vRep[0]->FillCell("GRAPHIC_3", 0, 0, .Parent->GetGraphicOpSynScoreImage(.TherapyStartDate, .DBDate, rect));
		}
	}
|>;
//====================================================
//
//====================================================
new AE_ReportWnd::UpdateReportSizePos(void) = <|
	new size = self->GetClientSize();
	.Width = size[0];
	.Height = size[1];
	if (.ToolBar != EMPTY)
		.ToolBar->SetSize(.Width, .ToolBar->GetSize()[1]);

	if (.Report != EMPTY)
	{
		new top = .ToolBar->GetSize()[1];
		new Width = (self->GetClientSize()[0] - 4);
		.Report->SetPos(0, top);
		.Report->SetSize(Width, size[1] - top);
		.Report->SetScrollRange();
		.Report->Invalidate(TRUE);
	}
	if (.ToolBar != EMPTY)
		.ToolBar->Invalidate(TRUE);
|>;

//====================================================
//
//====================================================
new AE_ReportWnd::OnSize(int, int, int) = <|
param code, width, height;
	if (code != SIZE_MINIMIZED)
	{
		if (.Height == height && .Width == width)
			return 0;
		.Height = height;
		.Width = width;
		Pluk->FlushIdle();
		self->UpdateReportSizePos();
	}
	return 0;
|>;
//====================================================
//
//====================================================
new AE_ReportWnd::CanClose(void) = <|
	Pluk->FlushIdle();
	new cell = .Report.control.cell;
	.Report->UpdateCell();
	.Report.control = EMPTY;
	.Report->SetControl(cell);
	new tab = .Report->GetTable(0, "DATE_PLACE");
	cell = tab->GetCell("REP_PLACE");
	if (cell.record.str != "{Place}")
		AllergoEyeIni->WriteStrW("PLACE", "TOWN", instance WString(cell.record.str));
	return TRUE;
|>;

//====================================================
//
//====================================================
new AE_ReportWnd::OnPrint(void) = <|
	.Report->PrintDlg();
|>;

//====================================================
//
//====================================================
new AE_ReportWnd::OnSave(void) = <|
	.Report->Save(.DownloadReport);	
|>;
//====================================================
//
//====================================================
new AE_ReportWnd::OnViewImg(boolean) = <|
param b;
	.Report.fImegesView = b;
	.Report->Reload();
	self->UpdateReportSizePos();
|>;


