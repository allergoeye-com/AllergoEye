//main->RecalculateAll();
//main->RebuildDB();
//main->ImportOpScore();
//main->OnExportStat();
//main->OnExportStat_Split();
global tSet = main->OnLoadAllData();
trace "tSet = ", tSet[0]->Len(), CR;
global cSet = main->OnLoadAllData();
trace "cSet = ", cSet[0]->Len(), CR;
//global cRisto = main->OnLoadAllData();

	global graph = instance GraphicWnd();
	global NN = instance PNN();
	NN->InitAEScore(tSet[0][0]->Len(), tSet[1][0]->Len(), tSet[1][1]->Len());

	NN.Verbose = TRUE;
	NN.TraceTimer = FALSE;
	NN.UseDropOut = FALSE;
	NN.SaveBest = TRUE;
	NN.IsComplementary = TRUE;
	NN.SavePath = "c:/Users/Yannis/NN.Im.Soft Dropbox/Development/DiskP/Yura/";
	NN.Name = "AESCORE-Apr25-";
	NN.RegularizeGrad = << "L2", 0.001 >>;
	NN.X = << >>;
	NN.Y = << >>;
	NN.Disp = << >>;
	NN.ValidationSet = cSet;

			//Samples, Labels, BatchSize, nEpoch, step0;
	NN->Learn(tSet[0], tSet[1], 50, 10000, 1.0e-5);
	if (NN.X->Len() > 2)
		graph->AddCurve(instance Curve(NN.X, NN.Y, NN.Disp));

/*
	NN->Save();

	global NN = instance PNN();
	NN->Load("c:/Users/Yannis/NN.Im.Soft Dropbox/Development/DiskP/Yura/NN-AESCORE-Dec26-b--0.844491--95.025.nn");
	NN.UseDropOut = FALSE;
	main->CalculateByNN(TRUE);
	for (new i = 0; i < cSet[0]->Len(); ++i)
	{
		NN->Map(cSet[0][i]);
		trace instance Vector(cSet[1][i]), NN->GetResult(), CR;
	}

	for (new i = 0; i < NN.NNSet->Len(); ++i)
		trace i, " ", NN.NNSet[i]->GetWv(), CR;
	for (new i = 0; i < NN.NNSet->Len(); ++i)
		trace i, " ", NN.NNSet[i]->GetB(), CR;

	new v = NN.Layers[5]->GetVector();
	trace "!!!!!!!!!!!!!!!!\r\n";
	for (new i = 0; i < v[0]->Len(); ++i)
		trace Printf("%04d, %g\r\n", i, v[0][i]);
	trace "!!!!!!!!!!!!!!!!\r\n";
		

	NN.ValidationSet = tSet;
	NN.Stop = TRUE;
	NN.TraceTimer = TRUE;
	NN.TraceTimer = FALSE;

	new list = Odml2Exec("select im from DBPicture as im where im.DistrL is not null", << >>);
	new distr0 = list[0].DistrR[0];
	new distr1 = list[0].DistrR[1];
	for (new i = 1; i < list->Len(); ++i)
	{
		distr0 += list[i].DistrR[0];
		distr1 += list[i].DistrR[1];
	}
	while (graph->GetNumbGraph() < 2)
		graph->AddGraphic();
	graph->AddCurve(distr0, 0);
	graph->AddCurve(distr1, 1);
*/
/*
	global graph1 = instance GraphicWnd();
	while (graph1->GetNumbGraph() < 2)
		graph1->AddGraphic();
	new p = Odml2Exec("select p from DBPatient as p where p.PatientID = ?", << 9892 >>)[0];
	new tests = &p.Date[0].Tests;
	tests->QSort(<|param key, elem; return key->GetTestOrder() <> elem->GetTestOrder(); |>);
	for (new j = 0; j < tests->Len(); ++j)
	{
		new distrL = tests[j].Pictures[0].DistrL[0];
		new distrR = tests[j].Pictures[0].DistrR[0];
		for (new k = 1; k < tests[j].Pictures->Len(); ++k)
		{
			distrL += tests[j].Pictures[k].DistrL[0];
			distrR += tests[j].Pictures[k].DistrR[0];
		}
		graph1->AddCurve(distrL, 0);
		graph1->AddCurve(distrR, 1);
	}
	
MainMenu::BalanceWB = FALSE;
MainMenu::BalanceWB = TRUE;
*/
