//=============================================
//
//=============================================
 new FileNode::GetSubWinPath(void) = {|
	new Name = self->GetWinPath();
	new fname = JustFileName(Name);
	new dname = JustDirName(Name);
	dname = dname->Tokenize(SFD);
	dname = dname->Tail(1);
	dname = dname->SynStr(SFD) @ SFD;
	return dname @ fname;
|};


global UpdateDir = <|
	stop;
	new SrcDir = instance GDirDialog()->Open().DirName;
	new DstDir = instance GDirDialog()->Open().DirName;
	new type = << ".bin", ".ctr", ".dst", ".nam", ".res" >>;
	new SrcdirNode = instance TreeDir(SrcDir, <<>>);
	new SrcList = SrcdirNode->Root()->GetFileList(type, TRUE);
	SrcList->QSort({|param key, elem; return key->GetSubWinPath() <> elem->GetSubWinPath(); |});

	new DstdirNode = instance TreeDir(DstDir, <<>>);
	new DstList = DstdirNode->Root()->GetFileList(type, TRUE);
	DstList->QSort({|param key, elem; return key->GetSubWinPath() <> elem->GetSubWinPath(); |});
	new OpScoreList = << >>;
	for (new i = 0, l = SrcList->Len(); i < l; ++i)
	{
	
		new Name = SrcList[i]->GetSubWinPath();
		new index = DstList->BFind(Name, {|param key, elem; return key <>  elem->GetSubWinPath(); |});
		if (index >= 0)
		{
			trace SrcDir @ SrcList[i]->GetWinPath(), " -> ", DstDir @ DstList[index]->GetWinPath(), CR;
				new src = instance File(SrcDir @ SrcList[i]->GetWinPath());
			src->Open("rb");
			new data = src->Read(-1);
			src->Close();
			
			new dst = instance File(DstDir @  DstList[index]->GetWinPath());
			dst->Open("wb");
			dst->Write(data);
			dst->Close();

			new opName = JustDirName(src.FileName) @ "opscore.txt";
			if (OpScoreList->BFind(opName) == -1)
			{
				new op = instance File(opName);
				if (op->Access(ACCESS_EXIST) == TRUE)
				{
					op->Open("rb");
					data = op->Read(-1);
					op->Close();
					op = instance File(JustDirName(dst.FileName) @ "opscore.txt");
					op->Open("wb");
					op->Write(data);
					op->Close();
				}
				OpScoreList->BInsert(opName);
			}
		}
		else
			stop;
		
	}
|>;
//UpdateDir();

global UpdateIni = <|
	new SrcDir = instance GDirDialog()->Open().DirName;
	new type = << ".ini" >>;
	new SrcdirNode = instance TreeDir(SrcDir, <<>>);
	new SrcList = SrcdirNode->Root()->GetFileList(type, TRUE);

	for (new i = 0, l = SrcList->Len(); i < l; ++i)
	{
		new InfoName = SrcDir @ SrcList[i]->GetWinPath();
		new info = instance IniFile(InfoName);
		new id = info->ReadStrW("CARD", "ID", "");
		new fam =  info->ReadStrW("CARD", "FAMILY", "");
		new nam = info->ReadStrW("CARD", "NAME", "");
		new DirName = JustDirName(InfoName)->Tokenize(SFD);
		new last = DirName->Last();
		last = last->Tokenize("_");
		if (last->Len() == 3)
		{
			new Family = last[0];
			new Name = last[1];
			new ID = last[2];
			if (Family != fam)
				info->WriteStrW("CARD", "FAMILY", Family);
			if (Name != nam)
				info->WriteStrW("CARD", "NAME", Name);
		}
	}
|>;
UpdateIni();
