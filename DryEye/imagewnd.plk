//=========================================================
//=========================================================
//
//=========================================================
//=========================================================
class ImageWnd : GWnd {
		Bmp;
		Parent;
		Scale;
		mdc;
		screen;
		_screen;

		fStartPan;
		tracker;
		trans;
		file;
		IndexRoi;
		newROI;
		Mask;
		Src;

	};
#define OFFSET_LT 2
//=========================================================
//=========================================================
event WND_UPDATE, 		ImageWnd::OnUpdate;
event WND_SIZE, 		ImageWnd::OnSize;
event WND_LBUTTONDOWN, 	ImageWnd::OnLButtonDown;
event WND_LBUTTONUP, 	ImageWnd::OnLButtonUp;
event WND_RBUTTONDBLCLK, ImageWnd::OnRButtonDblk;
event WND_MOUSEMOVE,	ImageWnd::OnMouseMove;
event WND_MOUSEWHEEL, 	ImageWnd::OnMouseWheel;
event WND_RBUTTONDOWN, 	ImageWnd::OnRButtonDown;
event WND_KEYDOWN,  	ImageWnd::OnKeyDown;


//=============================================
//
//=============================================

new ImageWnd::ImageWnd(refer object GWnd) = <|
param Parent;
	.Parent = &Parent;
	self->GWnd("IMAGE_WND", Parent);
	self->AllowEvent(WND_UPDATE);
	self->AllowEvent(WND_LBUTTONDOWN);
	self->AllowEvent(WND_LBUTTONUP);
	self->AllowEvent(WND_MOUSEMOVE);
	self->AllowEvent(WND_MOUSEWHEEL);
	self->AllowEvent(WND_RBUTTONDBLCLK);
	self->AllowEvent(WND_SIZE);
	self->AllowEvent(WND_RBUTTONDOWN);
	self->AllowEvent(WND_KEYDOWN);

	.fStartPan = FALSE; 
	self->Open();
 	.tracker = instance TrackerRect();
	self->Show();
	self->DragAcceptFiles(TRUE);
|>;
//=============================================
//
//=============================================
new ImageWnd::OnLoad(pointer object FileNode) = <|
param file;
	self->OnSelectRoi(-1);
	.IndexRoi = EMPTY;
	.file = file;

	new dir = AllergoEyeIni->ReadStr("DIR", "DATA");
	if (dir->GetLastByte() != FD)
		dir @= SFD;
	dir @= file->GetWinPath();
	.Bmp = instance MBmp();
	.Mask = EMPTY;
	.Src = EMPTY;

//	new Image = MathImage::LoadImageSet(dir);
	new Image = LoadImageWithBlur(dir);
/*	for (new k = 0; k < 3; ++k)
		Image[k]->Stretch(0.0, 1200, 316);
*/

	if (MainMenu::BalanceWB)
		DoBalanceWB(&Image);

	new LUT = instance SimpleLUT();
	LUT.Automatic = FALSE;
	LUT.Min = 0;
	LUT.Max = 255;
	new Params = instance Vector(3);
	Params = << << Image[0], 255, 0, 0, LUT >>, << Image[1], 0, 255, 0, LUT >>, << Image[2], 0, 0, 255, LUT >> >>;
	.Bmp =  instance MBmp(Get3BytesBits(Params), Image[0]->Width(), Image[0]->Height());
	self->FitImageToWindow();
|>;

//=============================================
//
//=============================================
new ImageWnd::Setup(void) = <|
	.mdc = instance MDC(self);
|>;
//=============================================
//
//=============================================
new ImageWnd::Draw(void) = <|
	//self->OnUpdate();
	
|>;
//=============================================
//
//=============================================
new ImageWnd::OnUpdate(void) = <|
	if (.IndexRoi != EMPTY && .IndexRoi >=  .file.roi->Len()) .IndexRoi = EMPTY;

	if (.trans == EMPTY || ._screen == EMPTY)
		self->onUpdate();
	.mdc->OpenDC();
	onerror {
		.mdc->CloseDC();
		return;
	}
	if (.Bmp != EMPTY)
	{
		new w = .Bmp->GetWidth();
		new h = .Bmp->GetHeight();
		new size = self->GetItemSize(ID_FRAME);
	
		new pos = self->GetItemPos(ID_FRAME);
		pos[0] += OFFSET_LT;
		pos[1] += OFFSET_LT;
		size[0] -= OFFSET_LT * 2;
		size[1] -= OFFSET_LT * 2;
		.mdc->OpenMBmp(._screen);
		.mdc->Show(.screen, 0, 0);
		if (.file.roi->Len() != 0)
			for (new i = 0, l = .file.roi->Len(); i < l; ++i)
				.file.roi[i]->OnDraw(.mdc, .trans, self);
		if (.newROI!= EMPTY)
		{
			.newROI->OnDraw(.mdc, .trans, self);
		}
		.mdc->CloseMBmp();

		.mdc->Show(._screen, pos[0], pos[1]);
		
	}
	.mdc->CloseDC();
|>;

//=============================================
//
//=============================================
new ImageWnd::onUpdate(void) = <|
//	new mdc = instance MDC(self);
	.mdc->OpenDC();
	if (.IndexRoi != EMPTY && .IndexRoi >=  .file.roi->Len()) .IndexRoi = EMPTY;

	onerror {
		.mdc->CloseDC();
		return;
	}
	if (.Bmp != EMPTY)
	{
		new w = .Bmp->GetWidth();
		new h = .Bmp->GetHeight();
		new size = self->GetItemSize(ID_FRAME);
		
		new pos = self->GetItemPos(ID_FRAME);
		pos[0] += OFFSET_LT;
		pos[1] += OFFSET_LT;
		size[0] -= OFFSET_LT * 2;
		size[1] -= OFFSET_LT * 2;
		if (.trans == EMPTY)
		{
			new scale = Min(size[0] / double(w), size[1] / double(h));
			new rect = instance Rect(0, 0, int(w * scale), int(h * scale));
			.mdc->Show(.Bmp, pos[0], pos[1]);
		}
		else
		{
			new rect = instance RECT(0, 0, size[0], size[1]);
			new rcDes = instance RECT(0, 0, w, h);
			new rc1 = instance RECT(0, 0, size[0], size[1]);

			.mdc->OpenMBmp(.screen);
			.mdc->SetBgColor(self->GWnd::GetBgColor());
			.mdc->Bar(rect);
			new rc = rc1;
			.trans->Dp2Lp(rc);
			rc = rc & rcDes;
			rect = rc;
			if (rect != EMPTY)
			{
				.trans->Lp2Dp(rect);
				.mdc->Stretch(.Bmp, rect, TRUE, rc);
				if (.Mask != EMPTY)
				{
					.mdc->BitmapRasterOp(BM_SRCAND);
					.mdc->Stretch(.Mask[0], rect, TRUE, rc);
					.mdc->BitmapRasterOp(BM_SRCINVERT);
					.mdc->Stretch(.Src[0], rect, TRUE, rc);
	
					.mdc->BitmapRasterOp(BM_SRCAND);
					.mdc->Stretch(.Mask[1], rect, TRUE, rc);
					.mdc->BitmapRasterOp(BM_SRCINVERT);
					.mdc->Stretch(.Src[1], rect, TRUE, rc);
				}
			}
			.mdc->CloseMBmp();
			if (._screen == EMPTY)
				._screen = .screen;
		
		}
	}
	.mdc->CloseDC();
|>;
//=============================================
//
//=============================================
new ImageWnd::Reset(void) = <|
	.Bmp = EMPTY;
|>;
//=============================================
//
//=============================================
new ImageWnd::OnLButtonDown(int, int) = <|
param x, y;
	if (.IndexRoi != EMPTY && .IndexRoi >=  .file.roi->Len()) .IndexRoi = EMPTY;

	if (.trans == EMPTY || .Bmp == EMPTY) return;
	self->SetFocus();
/*-------------------------
	if (.file.roi->Len() != 0 && .IndexRoi != EMPTY)
	{
		.file.roi[.IndexRoi]->OnLButtonDown(x- OFFSET_LT, y- OFFSET_LT, .trans,  self);
		return;
	}
-----------------------------*/

	.tracker->SetPos(x, y);
	.fStartPan = TRUE;
/*-------------------------
	if (GetKeyState(VK_SHIFT))
-----------------------------*/
	.tracker->Start();
	if (!GetKeyState(VK_SHIFT) && !GetKeyState(VK_CONTROL) && .newROI != EMPTY)
		.newROI->OnLButtonDown(x- OFFSET_LT, y- OFFSET_LT, .trans, self);
	else
	if (.file.roi->Len() != 0 && .IndexRoi != EMPTY)
	{
		.file.roi[.IndexRoi]->OnLButtonDown(x- OFFSET_LT, y- OFFSET_LT, .trans,  self);
		return;
	}

|>;
new ImageWnd::OnKeyDown(int) = <|
param key;

		if (key == VK_Z && GetKeyState(VK_CONTROL))
		{
			.Parent->TraceFileName();
		}

|>;
//=============================================
//
//=============================================
new ImageWnd::AddNewROI(void) = <|
	if (.IndexRoi != EMPTY && .IndexRoi >=  .file.roi->Len()) .IndexRoi = EMPTY;
	if (.file.roi->Len() != 0 && .IndexRoi != EMPTY)
	{

		if (.file.roi[.IndexRoi]->IsEdit())
			self->OnCommand(ID_END_ROI, 0);
	}
	if (.newROI != EMPTY)
		self->OnCommand(ID_END_NEW_ROI, 0);

	.newROI = instance NewROI();
	
|>;
new ImageWnd::OnSelectRoi(int) = <|
	if (.newROI != EMPTY)
		self->OnCommand(ID_END_NEW_ROI, 0);
|>;
//=============================================
//
//=============================================
new ImageWnd::OnLButtonUp(int, int) = <|
param x, y;
.fStartPan = FALSE;
	if (.trans == EMPTY || .Bmp == EMPTY) return;
if (!.tracker.start || .tracker->Width() < 4 || .tracker->Height() < 4)
{
	
	if (.newROI != EMPTY)
	{
		if (.newROI->OnLButtonUp(x- OFFSET_LT, y- OFFSET_LT, .trans, self))
			self->OnUpdate();
		return;
	}
	else
	if (.file.roi->Len() != 0 && .IndexRoi != EMPTY)
	{
		new res = .file.roi[.IndexRoi]->OnLButtonUp(x- OFFSET_LT, y- OFFSET_LT, .trans, self);
		if (res != EMPTY)
			.Parent->AddUndo("MovePOINT", res, .IndexRoi);

		self->OnUpdate();
		.Parent->OnUpdateROI();

		return;
	}

//	if (!.tracker.start || .tracker->Width() < 4 || .tracker->Height() < 4)
		return;
}
	new size = self->GetClientSize();

	.tracker->Hide(.mdc);
	.tracker->End();
	new rc = .tracker;
	.trans->Dp2Lp(rc);
	new rc1 = instance RECT(OFFSET_LT, OFFSET_LT, size[0] - OFFSET_LT * 2, size[1] - OFFSET_LT * 2);
	.trans->Init(rc1, rc);
	self->onUpdate();
	self->OnUpdate();

|>;
//=============================================
//
//=============================================
new ImageWnd::OnMouseMove(int, int) = <|
param x, y;
	if (.trans == EMPTY || .Bmp == EMPTY) return;

	if (GetKeyState(VK_LBUTTON))
	{
		if (GetKeyState(VK_SHIFT))
			.tracker->RubberBand(.mdc, x, y);
		else
		if (GetKeyState(VK_CONTROL))
		{
			if (.fStartPan)
			{
				.trans->Offset(x - .tracker.pos.x, y - .tracker.pos.y);
				.tracker->SetPos(x, y);
				self->onUpdate();
				self->OnUpdate();		
			}
		}
		else
		if (.newROI != EMPTY)
		{
			new lpt = instance POINT(x, y);
	

			if (.newROI->OnMouseMove(x - OFFSET_LT, y - OFFSET_LT, .trans, self))
			self->OnUpdate();
					
			return;
		}
		else
		if (.IndexRoi != EMPTY && .file.roi->Len() > .IndexRoi)
		{
			.file.roi[.IndexRoi]->OnMouseMove(x - OFFSET_LT, y - OFFSET_LT, .trans, self);

			self->OnUpdate();
			return;
		}
	}
	else
	{
	}

|>;

//=============================================
//
//=============================================
new ImageWnd::OnRButtonDblk(int, int) = <|
param x, y;
	if (.trans == EMPTY || .Bmp == EMPTY)
		return;
	if (GetKeyState(VK_SHIFT))
	{
		new mask = .Parent->LoadMask();
		.Mask = mask;
		.Src  = .Mask;
		new dc = instance MDC();

		dc->OpenMBmp(.Src[0]);
		dc->SetBgColor(instance ColorRef(255, 0, 0));
		dc->Bar(0, 0, .Src[0]->GetWidth()/2, .Src[0]->GetHeight());
		dc->SetBgColor(instance ColorRef(255, 0, 255));
		dc->Bar(.Src[0]->GetWidth()/2,, 0, .Src[0]->GetWidth(), .Src[0]->GetHeight());
		dc->BitmapRasterOp(BM_SRCAND);
		dc->Show(.Mask[0], 0, 0);
		dc->CloseMBmp();
		dc->OpenMBmp(.Mask[0]);
		dc->SetBgColor(instance ColorRef(255, 255, 255));
		dc->Bar(0, 0, .Src[0]->GetWidth(), .Src[0]->GetHeight());
		dc->BitmapRasterOp(BM_SRCINVERT);
		dc->Show(mask[0], 0, 0);
		dc->CloseMBmp();
	
		dc->OpenMBmp(.Src[1]);
		dc->SetBgColor(instance ColorRef(0, 255, 0));
		dc->Bar(0, 0, .Src[0]->GetWidth()/2, .Src[0]->GetHeight());
		dc->SetBgColor(instance ColorRef(0, 255, 255));
		dc->Bar(.Src[0]->GetWidth()/2,, 0, .Src[0]->GetWidth(), .Src[0]->GetHeight());
		dc->BitmapRasterOp(BM_SRCAND);
		dc->Show(.Mask[1], 0, 0);
		dc->CloseMBmp();
		dc->OpenMBmp(.Mask[1]);
		dc->SetBgColor(instance ColorRef(255, 255, 255));
		dc->Bar(0, 0, .Src[0]->GetWidth(), .Src[0]->GetHeight());
		dc->BitmapRasterOp(BM_SRCINVERT);
		dc->Show(mask[1], 0, 0);
		dc->CloseMBmp();
		self->onUpdate();
		self->OnUpdate();		
	}
	else
	self->FitImageToWindow();
|>;
//=============================================
//
//=============================================
new ImageWnd::FitImageToWindow(void) = <|
	if (.Bmp == EMPTY)
		return;
	new size = self->GetClientSize();
	new rc1 = instance RECT(0, 0, size[0], size[1]);
	new w = .Bmp->GetWidth();
	new h = .Bmp->GetHeight();
	new rc2 = instance RECT(0, 0, w, h);
	.trans = instance Transform2D();	
	.trans->Init(rc1, rc2);
	self->onUpdate();		
|>;
//=============================================
//
//=============================================
new ImageWnd::OnSize(refer ...) = <|
param code, width, height;
	if (code != SIZE_MINIMIZED)
	{
		new size = self->GetItemSize(ID_FRAME);
		._screen = EMPTY;
		.screen = instance MBmp(size[0] - 4, size[1] - 4);
	}
|>;
//=============================================
//
//=============================================
new ImageWnd::OnMouseWheel(int) = <|
param zDelta;
	if (.trans == EMPTY || .Bmp == EMPTY)
		return;
	new xy = self->GetCursorPos();
	new x = xy[0];
	new y = xy[1];

	new sz = self->GetClientSize();
	zDelta *= -0.5;
	new rc = instance RECT(-zDelta, -zDelta, sz[0] + zDelta, sz[1] + zDelta);
	new pt = rc->Center();
	pt = instance POINT(x, y);
	new mx = Max(double(sz[0])/double(rc->Width()), double(sz[1])/double(rc->Height()));
	if (mx > 1.0 &&  .trans.form[0][0] > 5.0) return;
	if (mx < 1.0 &&  .trans.form[0][0] < 0.5) return;
	.trans->Scale(mx, pt);
	self->onUpdate();
	self->OnUpdate();
		

|>;
//=============================================
//
//=============================================
new ImageWnd::InitTransform(void) = <|

	if (.Bmp == EMPTY) return;
	new size = self->GetClientSize();
	new rc1 = instance RECT(0, 0, size[0], size[1]);
	new w = .Bmp->GetWidth();
	new h = .Bmp->GetHeight();
	new rc2 = instance RECT(0, 0, w, h);
	.trans = instance Transform2D();
	.trans->Init(rc1, rc2);
	self->onUpdate();
	self->OnUpdate();
		
|>;
//=============================================
//
//=============================================
new ImageWnd::OnRButtonDown(int, int) = <|
param x, y;
	if (.IndexRoi != EMPTY && .IndexRoi >=  .file.roi->Len()) .IndexRoi = EMPTY;

	new popup = instance GMenu("POPUP_MENU");
	if (.newROI != EMPTY)
	{
		if (.newROI.Points->Len() > 2)
		{
		
			.tracker.pos = instance POINT(x, y);
			if (.newROI->OnSelect(.tracker.pos.x - OFFSET_LT, .tracker.pos.y - OFFSET_LT, .trans, self))
			{
				popup->InsertItem(-1, ID_DELETE_POINT_NEW_ROI, W1_DELETE_POINT);
				popup->InsertSeparator(-1);
			}
			popup->InsertItem(-1, ID_CANCEL_NEW_ROI, W2_CANCEL);

		
			popup->InsertItem(-1, ID_END_NEW_ROI, W1_END);
			popup->Popup(x - OFFSET_LT, y - OFFSET_LT, self);
		}	
		
	}
	else
	if (.file.roi->Len() != 0 && .IndexRoi != EMPTY)
	{
		if (.IndexRoi >=.file.roi->Len())
		{
			.IndexRoi = EMPTY;
			return;
		}
		.tracker.pos = instance POINT(x, y);
		if (.file.roi->Len() != 0 && .IndexRoi != EMPTY && .file.roi[.IndexRoi]->IsEdit())
		{
			if (.file.roi[.IndexRoi]->OnSelectCorner(.tracker.pos.x - OFFSET_LT, .tracker.pos.y - OFFSET_LT, self))
			{
				popup->InsertItem(-1, ID_DELETE_POINT_ROI, W1_DELETE_POINT);
				popup->InsertSeparator(-1);
			}
			else
			if (.file.roi[.IndexRoi]->OnSelectCurve(.tracker.pos.x - OFFSET_LT, .tracker.pos.y - OFFSET_LT, self))
			{
				popup->InsertItem(-1, ID_ADD_POINT_ROI, W1_INSERT_POINT);
				popup->InsertSeparator(-1);
			}
			
			popup->InsertSeparator(-1);
			popup->InsertItem(-1, ID_END_ROI, W1_END_EDIT);
		}
		
		popup->Popup(x - OFFSET_LT, y - OFFSET_LT, self);
	}
|>;
//=============================================
//
//=============================================
new ImageWnd::CancelNewROI(void) = <|
	if (.newROI != EMPTY)
		self->OnCommand(ID_CANCEL_NEW_ROI, 0);
|>;

new ImageWnd::EndNewROI(void) = <|
	if (.newROI != EMPTY)
		self->OnCommand(ID_END_NEW_ROI, 0);
|>;
//=============================================
//
//=============================================
new ImageWnd::EnableEdit(boolean, refer any) = <|
param flg, ref;
	if (flg)
	{
		.IndexRoi = ref;
		.file.roi[.IndexRoi]->Edit(TRUE);
		self->OnUpdate();
	}
	else
		self->EndEdit(ref);

|>;
//=============================================
//
//=============================================
new ImageWnd::EndEdit(void) = <|
	self->EndEdit(EMPTY);
|>;

//=============================================
//
//=============================================
new ImageWnd::EndEdit(refer any) = <|
param ref;
	if (.IndexRoi != EMPTY && .IndexRoi >=  .file.roi->Len())
		.IndexRoi = EMPTY;
	if (.IndexRoi != EMPTY)
	{
		.file.roi[.IndexRoi]->Edit(FALSE, ref);
		.IndexRoi = EMPTY;
		self->OnUpdate();
		.Parent->OnUpdateROI();
		.Parent->OnEndEdit();
	}
|>;

//=============================================
//
//=============================================
new ImageWnd::OnCommand(int, int) = <|
param id, notifyCode;

if (.newROI != EMPTY)
{
	switch(id)
	{
		case ID_DELETE_POINT_NEW_ROI:
		{
			.newROI->Delete();
			self->OnUpdate();
			break;
		}
		case ID_CANCEL_NEW_ROI:
			.newROI = EMPTY;
			self->OnUpdate();
			.Parent->EndNewROI();
			
			break;

		case ID_END_NEW_ROI:
		{
			
			if (.newROI->Len() > 2)
			{
				new c = instance ROISet(.newROI.Points);
				.Parent->AddUndo("AddROI", <<c, "">>, .file.roi->Len());
				.file.roi @= c;
				.file.names @= "";
			}
			.newROI = EMPTY;
			self->OnUpdate();
			.Parent->EndNewROI();

//			.Parent->OnUpdateROI();
			
			break;
		
		}
	}
}
else
{
	switch(id)
	{
		case ID_DELETE_POINT_ROI:
		{
			new res = .file.roi[.IndexRoi]->Delete();
			if (res != EMPTY)
				.Parent->AddUndo("DeletePOINT", res, .IndexRoi);
			self->OnUpdate();
			.Parent->OnUpdateROI();

			break;
		}
		
		case ID_ADD_POINT_ROI:
		{
			new res = .file.roi[.IndexRoi]->Insert();
			if (res != EMPTY)
				.Parent->AddUndo("InsertPOINT", res, .IndexRoi);

			self->OnUpdate();
			.Parent->OnUpdateROI();
			break;
		}
		case ID_END_ROI:
		{
			self->EndEdit(EMPTY);
			break;
		}

	}
}
	return self->GWnd::OnCommand(id, notifyCode);
|>;


