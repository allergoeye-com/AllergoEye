class AddTherapy : ModalForm {
	Therapy;
	eBoxDate;
	};
	
new AddTherapy::AddTherapy(refer object DBTherapy, refer object GWnd) = <|
param tp, parent;
	.Therapy  = tp;
	if (.Therapy.StartDate != EMPTY)
		.Therapy.StartDate = .Therapy.StartDate->PrintDMY();
	self->ModalForm("DLG_ADD_THERAPY", parent);
|>;
//===================================================================
//
//===================================================================
new AddTherapy::Setup(void) = <|
	self->ModalForm::Setup();
	self->Bind(self);
	self->UpdateForm();
	.eBoxDate = instance DateEdit(ID_START_DATE, self);
|>;
//===================================================================
//
//===================================================================
new AddTherapy::CanClose( void ) = <|
	.Therapy.StartDate = instance TimeDate(.Therapy.StartDate);
	return TRUE;
|>;

//===================================================================
//
//===================================================================
new AddTherapy::MyValidateRegExpr(refer any, refer any) = <|
param data, pars;
	new delim = instance Locale().DateDelimiter;
	new expr = Printf("[1-9]|(0[1-9])|([1-2][0-9])|(3[0-1])'%s'((0[1-9])|(1[0-2]))'%s'((19)|(20))[0-9][0-9]", delim, delim);
	data->TrimTrail();
	data->TrimLead();
	expr =
	"
		%%
			(" @ expr @ ") {||}
		%%
	";
	if (!instance LexScanner(expr)->Check(data) || instance Date(data) > instance Date())
	{
		ErrorBox(W1_WRONG_DATE_FORMAT, *(pars.Form));
		Pluk->SetError(ERR_FORM_TRIGGER_ERROR);
	}
|>;
